from fastapi import APIRouter, UploadFile, File, Form, HTTPException, Depends
import logging
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession
from app.services.template_service import TemplateManager
from app.database import get_db

router = APIRouter(prefix="/templates", tags=["Templates"])

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@router.get("/check-status")
async def check_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —à–∞–±–ª–æ–Ω—ã."""
    try:
        status = await TemplateManager.check_status()
        logger.info(f"Check status result: {status}")
        return status
    except Exception as e:
        logger.error(f"Error checking status: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.")

@router.post("/start-setup")
async def start_setup():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤."""
    try:
        result = await TemplateManager.start_setup()
        logger.info("Setup started successfully.")
        return result
    except Exception as e:
        logger.error(f"Error starting setup: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

@router.post("/define-fields")
async def define_fields(fields: List[str]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è."""
    logger.info(f"Received fields: {fields}")
    try:
        result = await TemplateManager.define_fields(fields)
        logger.info(f"Fields defined successfully: {result}")
        return result
    except Exception as e:
        logger.error(f"Error defining fields: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π.")

@router.get("/instruction")
async def get_instruction():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—É—á–∞–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É.
    """
    try:
        instruction = await TemplateManager.get_instruction()
        logger.info(f"Instruction data: {instruction}")
        return instruction
    except Exception as e:
        logger.error(f"Error fetching instruction: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")

@router.post("/upload")
async def upload_template(
    file: UploadFile = File(...),
    template_type: str = Form(...),
    display_name: str = Form(...),
    fields: List[str] = Form(...),
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏."""
    logger.info(f"üì§ [UPLOAD] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}, type: {template_type}, name: {display_name}")
    logger.info(f"üîç [UPLOAD] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ fields: {fields} ({type(fields)})")

    try:
        result = await TemplateManager.upload_template(file, template_type, display_name, fields, db)
        logger.info(f"‚úÖ [UPLOAD] –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result}")
        return result
    except Exception as e:
        logger.error(f"‚ùå [UPLOAD ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞.")


@router.post("/update")
async def update_template(
    template_id: int = Form(...),
    display_name: str = Form(...),
    fields: List[str] = Form(...),
    db: AsyncSession = Depends(get_db)
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏ display_name –¥–ª—è —à–∞–±–ª–æ–Ω–∞.
    """
    logger.info(f"Updating template ID: {template_id}, new name: {display_name}, fields: {fields}")
    try:
        updated_data = {
            "display_name": display_name,
            "dynamic_fields": fields
        }
        result = await TemplateManager.update_template(template_id, updated_data, db)
        logger.info(f"Template updated successfully: {result}")
        return result
    except Exception as e:
        logger.error(f"Error updating template {template_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")

@router.post("/delete")
async def delete_template(
    template_type: str = Form(...),
    display_name: str = Form(...),
    db: AsyncSession = Depends(get_db)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É db
):
    """–£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ —Ç–∏–ø—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    logger.info(f"Received request to delete template. Type: {template_type}, Name: {display_name}")

    try:
        result = await TemplateManager.delete_template(template_type, display_name, db)
        
        if not result:
            logger.warning(f"Template not found for deletion: Type='{template_type}', Name='{display_name}'")
            raise HTTPException(status_code=404, detail=f"–®–∞–±–ª–æ–Ω '{display_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        logger.info(f"Template deleted successfully: {result}")
        return result

    except HTTPException as http_ex:
        logger.error(f"HTTP Exception: {http_ex.detail}")
        raise http_ex
    except Exception as e:
        logger.exception(f"Unexpected error while deleting template: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞.")


@router.get("/")
async def list_templates(db: AsyncSession = Depends(get_db)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        templates = await TemplateManager.list_templates(db)
        logger.info(f"Fetched templates: {templates}")
        return templates
    except Exception as e:
        logger.error(f"Error fetching templates: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤.")
