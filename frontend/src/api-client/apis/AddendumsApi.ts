/* tslint:disable */
/* eslint-disable */
/**
 * Самый Крутой Бэк
 * Бэкэнд для управления договорами, счетами, платежами и шаблонами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddendumCreate,
  AddendumResponse,
  HTTPValidationError,
} from '../models/index';
import {
    AddendumCreateFromJSON,
    AddendumCreateToJSON,
    AddendumResponseFromJSON,
    AddendumResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateNewAddendumContractsContractIdAddendumsPostRequest {
    contractId: number;
    addendumCreate: AddendumCreate;
}

export interface ListAddendumsContractsContractIdAddendumsGetRequest {
    contractId: number;
}

export interface RemoveAddendumContractsContractIdAddendumsAddendumIdDeleteRequest {
    contractId: number;
    addendumId: number;
}

/**
 * 
 */
export class AddendumsApi extends runtime.BaseAPI {

    /**
     * Создать новое дополнительное соглашение.
     * Create New Addendum
     */
    async createNewAddendumContractsContractIdAddendumsPostRaw(requestParameters: CreateNewAddendumContractsContractIdAddendumsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddendumResponse>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling createNewAddendumContractsContractIdAddendumsPost().'
            );
        }

        if (requestParameters['addendumCreate'] == null) {
            throw new runtime.RequiredError(
                'addendumCreate',
                'Required parameter "addendumCreate" was null or undefined when calling createNewAddendumContractsContractIdAddendumsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/contracts/{contract_id}/addendums/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddendumCreateToJSON(requestParameters['addendumCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddendumResponseFromJSON(jsonValue));
    }

    /**
     * Создать новое дополнительное соглашение.
     * Create New Addendum
     */
    async createNewAddendumContractsContractIdAddendumsPost(requestParameters: CreateNewAddendumContractsContractIdAddendumsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddendumResponse> {
        const response = await this.createNewAddendumContractsContractIdAddendumsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить список дополнительных соглашений.
     * List Addendums
     */
    async listAddendumsContractsContractIdAddendumsGetRaw(requestParameters: ListAddendumsContractsContractIdAddendumsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AddendumResponse>>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling listAddendumsContractsContractIdAddendumsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/{contract_id}/addendums/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddendumResponseFromJSON));
    }

    /**
     * Получить список дополнительных соглашений.
     * List Addendums
     */
    async listAddendumsContractsContractIdAddendumsGet(requestParameters: ListAddendumsContractsContractIdAddendumsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AddendumResponse>> {
        const response = await this.listAddendumsContractsContractIdAddendumsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить дополнительное соглашение.
     * Remove Addendum
     */
    async removeAddendumContractsContractIdAddendumsAddendumIdDeleteRaw(requestParameters: RemoveAddendumContractsContractIdAddendumsAddendumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling removeAddendumContractsContractIdAddendumsAddendumIdDelete().'
            );
        }

        if (requestParameters['addendumId'] == null) {
            throw new runtime.RequiredError(
                'addendumId',
                'Required parameter "addendumId" was null or undefined when calling removeAddendumContractsContractIdAddendumsAddendumIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/{contract_id}/addendums/{addendum_id}`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))).replace(`{${"addendum_id"}}`, encodeURIComponent(String(requestParameters['addendumId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Удалить дополнительное соглашение.
     * Remove Addendum
     */
    async removeAddendumContractsContractIdAddendumsAddendumIdDelete(requestParameters: RemoveAddendumContractsContractIdAddendumsAddendumIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAddendumContractsContractIdAddendumsAddendumIdDeleteRaw(requestParameters, initOverrides);
    }

}
