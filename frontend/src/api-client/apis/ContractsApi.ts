/* tslint:disable */
/* eslint-disable */
/**
 * Самый Крутой Бэк
 * Бэкэнд для управления договорами, счетами, платежами и шаблонами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContractCreate,
  ContractResponse,
  HTTPValidationError,
} from '../models/index';
import {
    ContractCreateFromJSON,
    ContractCreateToJSON,
    ContractResponseFromJSON,
    ContractResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateNewContractContractsPostRequest {
    contractCreate: ContractCreate;
}

export interface GetContractDetailContractsContractIdGetRequest {
    contractId: number;
}

/**
 * 
 */
export class ContractsApi extends runtime.BaseAPI {

    /**
     * Создать новый контракт.
     * Create New Contract
     */
    async createNewContractContractsPostRaw(requestParameters: CreateNewContractContractsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractResponse>> {
        if (requestParameters['contractCreate'] == null) {
            throw new runtime.RequiredError(
                'contractCreate',
                'Required parameter "contractCreate" was null or undefined when calling createNewContractContractsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/contracts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContractCreateToJSON(requestParameters['contractCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractResponseFromJSON(jsonValue));
    }

    /**
     * Создать новый контракт.
     * Create New Contract
     */
    async createNewContractContractsPost(requestParameters: CreateNewContractContractsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractResponse> {
        const response = await this.createNewContractContractsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить детали контракта.
     * Get Contract Detail
     */
    async getContractDetailContractsContractIdGetRaw(requestParameters: GetContractDetailContractsContractIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractResponse>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling getContractDetailContractsContractIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/{contract_id}`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractResponseFromJSON(jsonValue));
    }

    /**
     * Получить детали контракта.
     * Get Contract Detail
     */
    async getContractDetailContractsContractIdGet(requestParameters: GetContractDetailContractsContractIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractResponse> {
        const response = await this.getContractDetailContractsContractIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
