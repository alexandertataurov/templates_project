/* tslint:disable */
/* eslint-disable */
/**
 * Самый Крутой Бэк
 * Бэкэнд для управления договорами, счетами, платежами и шаблонами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface UpdateContractRateExchangeRateContractContractIdPutRequest {
    contractId: number;
    newRate: number;
}

/**
 * 
 */
export class ExchangeRateApi extends runtime.BaseAPI {

    /**
     * Обновить курс валюты в контракте.
     * Update Contract Rate
     */
    async updateContractRateExchangeRateContractContractIdPutRaw(requestParameters: UpdateContractRateExchangeRateContractContractIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling updateContractRateExchangeRateContractContractIdPut().'
            );
        }

        if (requestParameters['newRate'] == null) {
            throw new runtime.RequiredError(
                'newRate',
                'Required parameter "newRate" was null or undefined when calling updateContractRateExchangeRateContractContractIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['newRate'] != null) {
            queryParameters['new_rate'] = requestParameters['newRate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exchange-rate/contract/{contract_id}`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Обновить курс валюты в контракте.
     * Update Contract Rate
     */
    async updateContractRateExchangeRateContractContractIdPut(requestParameters: UpdateContractRateExchangeRateContractContractIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateContractRateExchangeRateContractContractIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
