/* tslint:disable */
/* eslint-disable */
/**
 * Самый Крутой Бэк
 * Бэкэнд для управления договорами, счетами, платежами и шаблонами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AppendixCreate,
  AppendixResponse,
  HTTPValidationError,
} from '../models/index';
import {
    AppendixCreateFromJSON,
    AppendixCreateToJSON,
    AppendixResponseFromJSON,
    AppendixResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateNewAppendixContractsContractIdAppendicesPostRequest {
    contractId: number;
    appendixCreate: AppendixCreate;
}

export interface ListAppendicesContractsContractIdAppendicesGetRequest {
    contractId: number;
}

export interface RemoveAppendixContractsContractIdAppendicesAppendixIdDeleteRequest {
    contractId: number;
    appendixId: number;
}

/**
 * 
 */
export class AppendicesApi extends runtime.BaseAPI {

    /**
     * Создать новое приложение.
     * Create New Appendix
     */
    async createNewAppendixContractsContractIdAppendicesPostRaw(requestParameters: CreateNewAppendixContractsContractIdAppendicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppendixResponse>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling createNewAppendixContractsContractIdAppendicesPost().'
            );
        }

        if (requestParameters['appendixCreate'] == null) {
            throw new runtime.RequiredError(
                'appendixCreate',
                'Required parameter "appendixCreate" was null or undefined when calling createNewAppendixContractsContractIdAppendicesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/contracts/{contract_id}/appendices/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppendixCreateToJSON(requestParameters['appendixCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppendixResponseFromJSON(jsonValue));
    }

    /**
     * Создать новое приложение.
     * Create New Appendix
     */
    async createNewAppendixContractsContractIdAppendicesPost(requestParameters: CreateNewAppendixContractsContractIdAppendicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppendixResponse> {
        const response = await this.createNewAppendixContractsContractIdAppendicesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить список приложений.
     * List Appendices
     */
    async listAppendicesContractsContractIdAppendicesGetRaw(requestParameters: ListAppendicesContractsContractIdAppendicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppendixResponse>>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling listAppendicesContractsContractIdAppendicesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/{contract_id}/appendices/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppendixResponseFromJSON));
    }

    /**
     * Получить список приложений.
     * List Appendices
     */
    async listAppendicesContractsContractIdAppendicesGet(requestParameters: ListAppendicesContractsContractIdAppendicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppendixResponse>> {
        const response = await this.listAppendicesContractsContractIdAppendicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить приложение.
     * Remove Appendix
     */
    async removeAppendixContractsContractIdAppendicesAppendixIdDeleteRaw(requestParameters: RemoveAppendixContractsContractIdAppendicesAppendixIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling removeAppendixContractsContractIdAppendicesAppendixIdDelete().'
            );
        }

        if (requestParameters['appendixId'] == null) {
            throw new runtime.RequiredError(
                'appendixId',
                'Required parameter "appendixId" was null or undefined when calling removeAppendixContractsContractIdAppendicesAppendixIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/{contract_id}/appendices/{appendix_id}`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))).replace(`{${"appendix_id"}}`, encodeURIComponent(String(requestParameters['appendixId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Удалить приложение.
     * Remove Appendix
     */
    async removeAppendixContractsContractIdAppendicesAppendixIdDelete(requestParameters: RemoveAppendixContractsContractIdAppendicesAppendixIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAppendixContractsContractIdAppendicesAppendixIdDeleteRaw(requestParameters, initOverrides);
    }

}
