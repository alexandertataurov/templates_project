/* tslint:disable */
/* eslint-disable */
/**
 * Самый Крутой Бэк
 * Бэкэнд для управления договорами, счетами, платежами и шаблонами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface DefineFieldsTemplatesDefineFieldsPostRequest {
    requestBody: Array<string>;
}

export interface DeleteTemplateTemplatesDeletePostRequest {
    templateType: string;
    displayName: string;
}

export interface UpdateTemplateTemplatesUpdatePostRequest {
    templateId: number;
    displayName: string;
    fields: Array<string>;
}

export interface UploadTemplateTemplatesUploadPostRequest {
    file: Blob;
    templateType: string;
    displayName: string;
    fields: Array<string>;
}

/**
 * 
 */
export class TemplatesApi extends runtime.BaseAPI {

    /**
     * Проверяет, загружены ли шаблоны.  :return: Статус.
     * Check Status
     */
    async checkStatusTemplatesCheckStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/templates/check-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Проверяет, загружены ли шаблоны.  :return: Статус.
     * Check Status
     */
    async checkStatusTemplatesCheckStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.checkStatusTemplatesCheckStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Сохраняет динамические поля.  :param fields: Список полей. :return: Подтверждение сохранения.
     * Define Fields
     */
    async defineFieldsTemplatesDefineFieldsPostRaw(requestParameters: DefineFieldsTemplatesDefineFieldsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling defineFieldsTemplatesDefineFieldsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/templates/define-fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Сохраняет динамические поля.  :param fields: Список полей. :return: Подтверждение сохранения.
     * Define Fields
     */
    async defineFieldsTemplatesDefineFieldsPost(requestParameters: DefineFieldsTemplatesDefineFieldsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.defineFieldsTemplatesDefineFieldsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удаляет шаблон по типу и названию.  :param template_type: Тип шаблона. :param display_name: Название шаблона. :param db: Сессия базы данных. :return: Подтверждение удаления.
     * Delete Template
     */
    async deleteTemplateTemplatesDeletePostRaw(requestParameters: DeleteTemplateTemplatesDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['templateType'] == null) {
            throw new runtime.RequiredError(
                'templateType',
                'Required parameter "templateType" was null or undefined when calling deleteTemplateTemplatesDeletePost().'
            );
        }

        if (requestParameters['displayName'] == null) {
            throw new runtime.RequiredError(
                'displayName',
                'Required parameter "displayName" was null or undefined when calling deleteTemplateTemplatesDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['templateType'] != null) {
            formParams.append('template_type', requestParameters['templateType'] as any);
        }

        if (requestParameters['displayName'] != null) {
            formParams.append('display_name', requestParameters['displayName'] as any);
        }

        const response = await this.request({
            path: `/templates/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Удаляет шаблон по типу и названию.  :param template_type: Тип шаблона. :param display_name: Название шаблона. :param db: Сессия базы данных. :return: Подтверждение удаления.
     * Delete Template
     */
    async deleteTemplateTemplatesDeletePost(requestParameters: DeleteTemplateTemplatesDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteTemplateTemplatesDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список динамических полей для формирования инструкции.  :return: Данные инструкции.
     * Get Instruction
     */
    async getInstructionTemplatesInstructionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/templates/instruction`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Возвращает список динамических полей для формирования инструкции.  :return: Данные инструкции.
     * Get Instruction
     */
    async getInstructionTemplatesInstructionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getInstructionTemplatesInstructionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список шаблонов с полной информацией из базы данных.  :param db: Сессия базы данных. :return: Список шаблонов.
     * List Templates
     */
    async listTemplatesTemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/templates/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Возвращает список шаблонов с полной информацией из базы данных.  :param db: Сессия базы данных. :return: Список шаблонов.
     * List Templates
     */
    async listTemplatesTemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listTemplatesTemplatesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Запускает процесс создания шаблонов.  :return: Результат запуска.
     * Start Setup
     */
    async startSetupTemplatesStartSetupPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/templates/start-setup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Запускает процесс создания шаблонов.  :return: Результат запуска.
     * Start Setup
     */
    async startSetupTemplatesStartSetupPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.startSetupTemplatesStartSetupPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Обновляет динамические поля и display_name для шаблона.  :param template_id: ID шаблона. :param display_name: Новое имя шаблона. :param fields: Новый список полей. :param db: Сессия базы данных. :return: Подтверждение обновления.
     * Update Template
     */
    async updateTemplateTemplatesUpdatePostRaw(requestParameters: UpdateTemplateTemplatesUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling updateTemplateTemplatesUpdatePost().'
            );
        }

        if (requestParameters['displayName'] == null) {
            throw new runtime.RequiredError(
                'displayName',
                'Required parameter "displayName" was null or undefined when calling updateTemplateTemplatesUpdatePost().'
            );
        }

        if (requestParameters['fields'] == null) {
            throw new runtime.RequiredError(
                'fields',
                'Required parameter "fields" was null or undefined when calling updateTemplateTemplatesUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['templateId'] != null) {
            formParams.append('template_id', requestParameters['templateId'] as any);
        }

        if (requestParameters['displayName'] != null) {
            formParams.append('display_name', requestParameters['displayName'] as any);
        }

        if (requestParameters['fields'] != null) {
            formParams.append('fields', requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        const response = await this.request({
            path: `/templates/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Обновляет динамические поля и display_name для шаблона.  :param template_id: ID шаблона. :param display_name: Новое имя шаблона. :param fields: Новый список полей. :param db: Сессия базы данных. :return: Подтверждение обновления.
     * Update Template
     */
    async updateTemplateTemplatesUpdatePost(requestParameters: UpdateTemplateTemplatesUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateTemplateTemplatesUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Загружает шаблон и сохраняет его в БД с динамическими полями.  :param file: Загружаемый файл. :param template_type: Тип шаблона. :param display_name: Название шаблона. :param fields: Динамические поля. :param db: Сессия базы данных. :return: Подтверждение загрузки.
     * Upload Template
     */
    async uploadTemplateTemplatesUploadPostRaw(requestParameters: UploadTemplateTemplatesUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadTemplateTemplatesUploadPost().'
            );
        }

        if (requestParameters['templateType'] == null) {
            throw new runtime.RequiredError(
                'templateType',
                'Required parameter "templateType" was null or undefined when calling uploadTemplateTemplatesUploadPost().'
            );
        }

        if (requestParameters['displayName'] == null) {
            throw new runtime.RequiredError(
                'displayName',
                'Required parameter "displayName" was null or undefined when calling uploadTemplateTemplatesUploadPost().'
            );
        }

        if (requestParameters['fields'] == null) {
            throw new runtime.RequiredError(
                'fields',
                'Required parameter "fields" was null or undefined when calling uploadTemplateTemplatesUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['templateType'] != null) {
            formParams.append('template_type', requestParameters['templateType'] as any);
        }

        if (requestParameters['displayName'] != null) {
            formParams.append('display_name', requestParameters['displayName'] as any);
        }

        if (requestParameters['fields'] != null) {
            formParams.append('fields', requestParameters['fields']!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        const response = await this.request({
            path: `/templates/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Загружает шаблон и сохраняет его в БД с динамическими полями.  :param file: Загружаемый файл. :param template_type: Тип шаблона. :param display_name: Название шаблона. :param fields: Динамические поля. :param db: Сессия базы данных. :return: Подтверждение загрузки.
     * Upload Template
     */
    async uploadTemplateTemplatesUploadPost(requestParameters: UploadTemplateTemplatesUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.uploadTemplateTemplatesUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
