/* tslint:disable */
/* eslint-disable */
/**
 * Самый Крутой Бэк
 * Бэкэнд для управления договорами, счетами, платежами и шаблонами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SpecificationCreate,
  SpecificationResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SpecificationCreateFromJSON,
    SpecificationCreateToJSON,
    SpecificationResponseFromJSON,
    SpecificationResponseToJSON,
} from '../models/index';

export interface CreateNewSpecificationContractsContractIdSpecificationsPostRequest {
    contractId: number;
    specificationCreate: SpecificationCreate;
}

export interface GetContractBySpecificationEndpointContractsContractIdSpecificationsContractSpecificationIdGetRequest {
    specificationId: number;
}

export interface RemoveSpecificationContractsContractIdSpecificationsSpecIdDeleteRequest {
    contractId: number;
    specId: number;
}

/**
 * 
 */
export class SpecificationsApi extends runtime.BaseAPI {

    /**
     * Создать новую спецификацию.
     * Create New Specification
     */
    async createNewSpecificationContractsContractIdSpecificationsPostRaw(requestParameters: CreateNewSpecificationContractsContractIdSpecificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpecificationResponse>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling createNewSpecificationContractsContractIdSpecificationsPost().'
            );
        }

        if (requestParameters['specificationCreate'] == null) {
            throw new runtime.RequiredError(
                'specificationCreate',
                'Required parameter "specificationCreate" was null or undefined when calling createNewSpecificationContractsContractIdSpecificationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/contracts/{contract_id}/specifications/`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpecificationCreateToJSON(requestParameters['specificationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpecificationResponseFromJSON(jsonValue));
    }

    /**
     * Создать новую спецификацию.
     * Create New Specification
     */
    async createNewSpecificationContractsContractIdSpecificationsPost(requestParameters: CreateNewSpecificationContractsContractIdSpecificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpecificationResponse> {
        const response = await this.createNewSpecificationContractsContractIdSpecificationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получить контракт по спецификации.
     * Get Contract By Specification Endpoint
     */
    async getContractBySpecificationEndpointContractsContractIdSpecificationsContractSpecificationIdGetRaw(requestParameters: GetContractBySpecificationEndpointContractsContractIdSpecificationsContractSpecificationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['specificationId'] == null) {
            throw new runtime.RequiredError(
                'specificationId',
                'Required parameter "specificationId" was null or undefined when calling getContractBySpecificationEndpointContractsContractIdSpecificationsContractSpecificationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/{contract_id}/specifications/contract/{specification_id}`.replace(`{${"specification_id"}}`, encodeURIComponent(String(requestParameters['specificationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Получить контракт по спецификации.
     * Get Contract By Specification Endpoint
     */
    async getContractBySpecificationEndpointContractsContractIdSpecificationsContractSpecificationIdGet(requestParameters: GetContractBySpecificationEndpointContractsContractIdSpecificationsContractSpecificationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getContractBySpecificationEndpointContractsContractIdSpecificationsContractSpecificationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удалить спецификацию.
     * Remove Specification
     */
    async removeSpecificationContractsContractIdSpecificationsSpecIdDeleteRaw(requestParameters: RemoveSpecificationContractsContractIdSpecificationsSpecIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contractId'] == null) {
            throw new runtime.RequiredError(
                'contractId',
                'Required parameter "contractId" was null or undefined when calling removeSpecificationContractsContractIdSpecificationsSpecIdDelete().'
            );
        }

        if (requestParameters['specId'] == null) {
            throw new runtime.RequiredError(
                'specId',
                'Required parameter "specId" was null or undefined when calling removeSpecificationContractsContractIdSpecificationsSpecIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contracts/{contract_id}/specifications/{spec_id}`.replace(`{${"contract_id"}}`, encodeURIComponent(String(requestParameters['contractId']))).replace(`{${"spec_id"}}`, encodeURIComponent(String(requestParameters['specId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Удалить спецификацию.
     * Remove Specification
     */
    async removeSpecificationContractsContractIdSpecificationsSpecIdDelete(requestParameters: RemoveSpecificationContractsContractIdSpecificationsSpecIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSpecificationContractsContractIdSpecificationsSpecIdDeleteRaw(requestParameters, initOverrides);
    }

}
