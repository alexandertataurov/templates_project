/* tslint:disable */
/* eslint-disable */
/**
 * Самый Крутой Бэк
 * Бэкэнд для управления договорами, счетами, платежами и шаблонами
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContractResponse
 */
export interface ContractResponse {
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    contractNumber: string;
    /**
     * 
     * @type {Date}
     * @memberof ContractResponse
     */
    contractDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContractResponse
     */
    validDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    placeOfSigning?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    exchangeRate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    supplierName: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    supplierRepresentative: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    supplierAddress: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    supplierBank: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    supplierAccount: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    buyerName: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    buyerAddress: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    buyerBank: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    buyerAccount: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    goodsName: string;
    /**
     * 
     * @type {number}
     * @memberof ContractResponse
     */
    quantity: number;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    pricePerUnit: string;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    totalPrice: string;
    /**
     * 
     * @type {Date}
     * @memberof ContractResponse
     */
    paymentDate: Date;
    /**
     * 
     * @type {string}
     * @memberof ContractResponse
     */
    deliveryTerms: string;
    /**
     * 
     * @type {number}
     * @memberof ContractResponse
     */
    claimPeriod: number;
    /**
     * 
     * @type {number}
     * @memberof ContractResponse
     */
    responsePeriod: number;
    /**
     * 
     * @type {number}
     * @memberof ContractResponse
     */
    id: number;
}

/**
 * Check if a given object implements the ContractResponse interface.
 */
export function instanceOfContractResponse(value: object): value is ContractResponse {
    if (!('contractNumber' in value) || value['contractNumber'] === undefined) return false;
    if (!('contractDate' in value) || value['contractDate'] === undefined) return false;
    if (!('supplierName' in value) || value['supplierName'] === undefined) return false;
    if (!('supplierRepresentative' in value) || value['supplierRepresentative'] === undefined) return false;
    if (!('supplierAddress' in value) || value['supplierAddress'] === undefined) return false;
    if (!('supplierBank' in value) || value['supplierBank'] === undefined) return false;
    if (!('supplierAccount' in value) || value['supplierAccount'] === undefined) return false;
    if (!('buyerName' in value) || value['buyerName'] === undefined) return false;
    if (!('buyerAddress' in value) || value['buyerAddress'] === undefined) return false;
    if (!('buyerBank' in value) || value['buyerBank'] === undefined) return false;
    if (!('buyerAccount' in value) || value['buyerAccount'] === undefined) return false;
    if (!('goodsName' in value) || value['goodsName'] === undefined) return false;
    if (!('quantity' in value) || value['quantity'] === undefined) return false;
    if (!('pricePerUnit' in value) || value['pricePerUnit'] === undefined) return false;
    if (!('totalPrice' in value) || value['totalPrice'] === undefined) return false;
    if (!('paymentDate' in value) || value['paymentDate'] === undefined) return false;
    if (!('deliveryTerms' in value) || value['deliveryTerms'] === undefined) return false;
    if (!('claimPeriod' in value) || value['claimPeriod'] === undefined) return false;
    if (!('responsePeriod' in value) || value['responsePeriod'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function ContractResponseFromJSON(json: any): ContractResponse {
    return ContractResponseFromJSONTyped(json, false);
}

export function ContractResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'contractNumber': json['contract_number'],
        'contractDate': (new Date(json['contract_date'])),
        'validDate': json['valid_date'] == null ? undefined : (new Date(json['valid_date'])),
        'placeOfSigning': json['place_of_signing'] == null ? undefined : json['place_of_signing'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'exchangeRate': json['exchange_rate'] == null ? undefined : json['exchange_rate'],
        'supplierName': json['supplier_name'],
        'supplierRepresentative': json['supplier_representative'],
        'supplierAddress': json['supplier_address'],
        'supplierBank': json['supplier_bank'],
        'supplierAccount': json['supplier_account'],
        'buyerName': json['buyer_name'],
        'buyerAddress': json['buyer_address'],
        'buyerBank': json['buyer_bank'],
        'buyerAccount': json['buyer_account'],
        'goodsName': json['goods_name'],
        'quantity': json['quantity'],
        'pricePerUnit': json['price_per_unit'],
        'totalPrice': json['total_price'],
        'paymentDate': (new Date(json['payment_date'])),
        'deliveryTerms': json['delivery_terms'],
        'claimPeriod': json['claim_period'],
        'responsePeriod': json['response_period'],
        'id': json['id'],
    };
}

export function ContractResponseToJSON(json: any): ContractResponse {
    return ContractResponseToJSONTyped(json, false);
}

export function ContractResponseToJSONTyped(value?: ContractResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contract_number': value['contractNumber'],
        'contract_date': ((value['contractDate']).toISOString().substring(0,10)),
        'valid_date': value['validDate'] == null ? undefined : ((value['validDate'] as any).toISOString().substring(0,10)),
        'place_of_signing': value['placeOfSigning'],
        'currency': value['currency'],
        'exchange_rate': value['exchangeRate'],
        'supplier_name': value['supplierName'],
        'supplier_representative': value['supplierRepresentative'],
        'supplier_address': value['supplierAddress'],
        'supplier_bank': value['supplierBank'],
        'supplier_account': value['supplierAccount'],
        'buyer_name': value['buyerName'],
        'buyer_address': value['buyerAddress'],
        'buyer_bank': value['buyerBank'],
        'buyer_account': value['buyerAccount'],
        'goods_name': value['goodsName'],
        'quantity': value['quantity'],
        'price_per_unit': value['pricePerUnit'],
        'total_price': value['totalPrice'],
        'payment_date': ((value['paymentDate']).toISOString().substring(0,10)),
        'delivery_terms': value['deliveryTerms'],
        'claim_period': value['claimPeriod'],
        'response_period': value['responsePeriod'],
        'id': value['id'],
    };
}

