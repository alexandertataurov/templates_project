const API_URL = "http://localhost:8000/templates"; // üî• –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
const DEBUG_MODE = import.meta.env.VITE_DEBUG_MODE === "on"; // –ß–∏—Ç–∞–µ–º DEBUG_MODE

// üõ†Ô∏è –õ–æ–≥–≥–µ—Ä API-–∑–∞–ø—Ä–æ—Å–æ–≤
const apiLogger = async (method: string, url: string, body?: any) => {
  console.log(`üì° [API] ${method.toUpperCase()} ${url}`);
  if (body instanceof FormData) {
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ FormData –¥–∞–Ω–Ω—ã–µ:");
    for (let [key, value] of body.entries()) {
      console.log(`  üîπ ${key}: ${value}`);
    }
  } else if (body) {
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(body, null, 2));
  }

  const options: RequestInit = { method };
  if (body) {
    options.body = body instanceof FormData ? body : JSON.stringify(body);
    if (!(body instanceof FormData)) {
      options.headers = { "Content-Type": "application/json" };
    }
  }

  try {
    const response = await fetch(url, options);
    const status = response.status;
    console.log(`üì• [API] –û—Ç–≤–µ—Ç ${status} ${response.statusText}`);

    // üî¥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ HTTP (404, 500 –∏ —Ç.–¥.)
    if (!response.ok) {
      if (status === 401) throw new Error("üö´ –û—à–∏–±–∫–∞ 401: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      if (status === 403) throw new Error("‚õî –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω");
      if (status === 404) throw new Error("‚ùå –û—à–∏–±–∫–∞ 404: –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      if (status === 500) throw new Error("üí• –û—à–∏–±–∫–∞ 500: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
      throw new Error(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ${status}: ${response.statusText}`);
    }

    const text = await response.text();
    try {
      const json = JSON.parse(text);
      console.log("‚úÖ [API] –û—Ç–≤–µ—Ç JSON:", json);
      return json;
    } catch (error) {
      console.error("‚ùå [API ERROR] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:", text);
      throw new Error("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON");
    }
  } catch (error) {
    console.error("‚ùå [API ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    throw error;
  }
};

// 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
export interface TemplateStatusResponse {
  status: string;
  message: string;
}

export const checkTemplatesStatus = async (): Promise<TemplateStatusResponse> => {
  try {
    const response = await fetch("YOUR_API_ENDPOINT");
    const data: TemplateStatusResponse = await response.json();
    return data; 
  } catch (error) {
    console.error("API error:", error);
    return { status: "error", message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞" };
  }
};

// 2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
export const startTemplateSetup = async (): Promise<any> =>
  apiLogger("POST", `${API_URL}/start-setup`);

// 3Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
export const defineFields = async (fields: string[]): Promise<any> =>
  apiLogger("POST", `${API_URL}/define-fields`, { fields });

// 4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π (–¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)
export const getInstructionFields = async (): Promise<string[]> =>
  apiLogger("GET", `${API_URL}/instruction`);

// 5Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
export const uploadTemplate = async (file: File, templateType: string, displayName: string): Promise<any> => {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("template_type", templateType);
  formData.append("display_name", displayName);
  return apiLogger("POST", `${API_URL}/upload`, formData);
};

// 6Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
export const updateTemplate = async (templateId: number, displayName: string, fields: string[]): Promise<any> => {
  const formData = new FormData();
  formData.append("template_id", templateId.toString());
  formData.append("display_name", displayName);
  formData.append("fields", JSON.stringify(fields));
  return apiLogger("POST", `${API_URL}/update`, formData);
};

// 7Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
export const deleteTemplate = async (templateType: string, displayName: string): Promise<any> => {
  const formData = new FormData();
  formData.append("template_type", templateType);
  formData.append("display_name", displayName);

  if (DEBUG_MODE) console.log("üì§ [API] –û—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", {
    template_type: templateType,
    display_name: displayName
  });

  return apiLogger("POST", `${API_URL}/delete`, formData);
};


// 8Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
export const getTemplates = async (): Promise<any[]> =>
  apiLogger("GET", `${API_URL}/`);
